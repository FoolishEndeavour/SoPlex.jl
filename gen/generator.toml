[general]
# we cant use lower case "soplex" because its used for variable names in C code
# library_name = "libsoplex"
library_name = "libsoplex_library"
module_name = "SoPlex"
## can use wild card in header names in library_names mapping list
# library_names = {"headerfile.h" = "libname", "otherheader" = "otherlibname", ...}
export_symbol_prefixes = ["SoPlex_", "SOPLEX_"]

# prologue_file_path = "./prologue.jl"
# epilogue_file_path = "./epilogue.jl"
# output_file_path = "../src/soplex_interface.jl"
## separate api (constants/types) from functions
## alternative output ignore prologue/epilogue
## alternative output does not automatically export functions
output_api_file_path = "../src/generated_soplex_api.jl"
output_common_file_path = "../src/generated_soplex_common.jl"


# exclude system headers from what we generate
is_local_header_only = true

use_julia_native_enum_type = true
# print_using_CEnum = false
print_enum_as_integer = false

## avoid generating mangled names
use_deterministic_symbol = true
## try to avoid C/C++ linker name mangling
## requires decent headers which avoid clashes
smart_de_anonymize = true

clang_diagnostics = true
clang_includes = "$(Clang.LLVM_INCLUDE)"


extract_c_coment_style = "doxygen"
fold_single_line_comment = true
struct_field_comment_style = "outofline"
enumerator_comment_style = "outofline"

## include C prototype in documentation
show_c_function_prototype = true

## how is this different to printer blacklist
# output_ignore_list = []

printer_blacklist = [
    "INLINE",
    "__FILENAME__",
    "__FILE__",
    "__LINE__",
    "RESTRICT",
    "rationalErrorMessage",
    "CMAKE_[A-Za-z0-9_]*",
]

[codegen]
# not ready to use macro version
use_ccall_macro = false
use_julia_bool = true
always_NUL_terminated_string = true
# opaque_func_arg_as_PtrCvoid = true
opaque_func_arg_as_PtrCvoid = false
opaque_as_mutable_struct = false

## should we include variadic fundstions ?
## are there any in soplex ?
wrap_variadic_function = false

## generate strictly typed function
is_function_strictly_typed = true

[codegen.macro]
macro_mode = "basic"
add_comment_for_skipped_macro = true
ignore_header_guards = true
ignore_header_guards_with_suffixes = ["_H_", "_H__"]

# dont ignore pure #defines as they are used for feature inclusion 
ignore_pure_definition = false


